{"version":3,"sources":["algorithms/helpers.js","algorithms/bubbleSort.js","algorithms/mergeSort.js","algorithms/quickSort.js","algorithms/selectionSort.js","components/Bar.js","App.js","index.js"],"names":["swap","array","indexA","indexB","temp","insertStep","arrayNew","position","arraySteps","currentStep","length","slice","splice","push","bubbleSort","colorSteps","colorKey","i","j","Array","fill","merge","arrayL","arrayR","shift","updateColor","concat","start","end","mergeSort","middle","Math","floor","quickSort","A","B","C","middleValue","sort","middleIndex","indexOf","console","log","pickPivot","pivot","map","key","bigIndex","max","selectionSort","changeindex","Bar","style","height","backgroundColor","className","App","state","barCount","timeouts","delay","algorithms","algorithmsSet","generateBars","clearColorKey","clearTimeouts","parseInt","barsTemp","random","setState","generateSteps","forEach","timeout","clearTimeout","changeToBubbleSort","changeToQuickSort","changeToMergeSor","e","target","value","changeToSelectionSor","steps","stepBack","stepForward","this","resetKey","setTimeout","playarrayBtn","barsDiv","index","IconButton","onClick","Pause","color","Autorenew","setTimeouts","PlayArrow","SkipPrevious","SkipNext","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7f1dc13f.chunk.js","sourcesContent":["//BubbleSort 交換位置\r\nexport function swap(array, indexA, indexB) {\r\n    let temp = array[indexA];\r\n    array[indexA] = array[indexB];\r\n    array[indexB] = temp;\r\n    return array;\r\n  }\r\n  //MergeSort :arraySteps加入新的一個array(步驟)\r\n  export function insertStep(arrayNew, position, arraySteps) {\r\n    //複製arraySteps的最後一個array\r\n    let currentStep = arraySteps[arraySteps.length - 1].slice();\r\n    //從position位置開始 刪除arrayNew.length個元素 插入arrayNew所有的值\r\n    currentStep.splice(position, arrayNew.length, ...arrayNew);\r\n    arraySteps.push(currentStep);\r\n  }","import { swap } from './helpers';\r\n\r\nconst bubbleSort = (array, position, arraySteps, colorSteps) => {\r\n  let colorKey = colorSteps[colorSteps.length - 1].slice();\r\n  //輸出完整的arraySteps colorSteps\r\n  for (let i = 0; i < array.length - 1; i++) {\r\n    for (let j = 0; j < array.length - i - 1; j++) {\r\n      if (array[j] > array[j + 1]) {\r\n        array = swap(array, j, j + 1);\r\n      }\r\n      arraySteps.push(array.slice());\r\n      colorKey[j] = 1;\r\n      colorKey[j + 1] = 1;\r\n      colorSteps.push(colorKey.slice());\r\n      colorKey[j] = 0;\r\n      colorKey[j + 1] = 0;\r\n    }\r\n    //最大值設定為綠色\r\n    colorKey[array.length - 1 - i] = 2;\r\n    arraySteps.push(array.slice());\r\n    colorSteps.push(colorKey.slice());\r\n  }\r\n\r\n  // Remaining bars become green\r\n  colorSteps[colorSteps.length - 1] = new Array(array.length).fill(2);\r\n  return;\r\n}\r\n\r\nexport default bubbleSort;","// import { insertStep } from './helpers';\r\n\r\nfunction mergeSort(array, position, arraySteps, colorSteps) {\r\n  if (array.length === 1) return array;\r\n  let middle = Math.floor(array.length / 2);\r\n  // Split and work recursively\r\n  let arrayL = mergeSort(array.slice(0, middle), position, arraySteps, colorSteps);\r\n  let arrayR = mergeSort(array.slice(middle), position + middle, arraySteps, colorSteps);\r\n  let arrayNew = merge(arrayL, arrayR, position, arraySteps, colorSteps);\r\n  arraySteps.push(arraySteps[arraySteps.length - 1].slice());\r\n  colorSteps.push(colorSteps[colorSteps.length - 1].fill(arrayNew.length === arraySteps[0].length ? 2 : 0));\r\n  return arrayNew;\r\n}\r\n\r\nconst merge = (arrayL, arrayR, position, arraySteps, colorSteps) => {\r\n  let arrayNew = [];\r\n  let A = 0;\r\n  let B = 0;\r\n  //處理  \r\n  while (arrayL.length > 0 && arrayR.length > 0) {\r\n    if (arrayL[A] < arrayR[B]) {\r\n      arrayNew.push(arrayL.shift());\r\n      insertStep(arrayNew, position, arraySteps);\r\n    } else {\r\n      arrayNew.push(arrayR.shift());\r\n      insertStep(arrayNew, position, arraySteps);\r\n    }\r\n    updateColor(position, colorSteps, arrayNew.length - 1, [], []);\r\n  }\r\n  // concatenate remaining values\r\n  if (arrayL.length !== 0 || arrayR.length !== 0) {\r\n    updateColor(position, colorSteps, arrayNew.length, arrayL, arrayR);\r\n    arrayNew = arrayNew.concat(arrayL);\r\n    arrayNew = arrayNew.concat(arrayR)\r\n    insertStep(arrayNew, position, arraySteps);\r\n  }\r\n  return arrayNew;\r\n}\r\n\r\nfunction insertStep(arrayNew, position, arraySteps) {\r\n    //複製arraySteps的最後一個array\r\n    let currentStep = arraySteps[arraySteps.length - 1].slice();\r\n    //從position位置開始 刪除arrayNew.length個元素 插入arrayNew所有的值\r\n    currentStep.splice(position, arrayNew.length, ...arrayNew);\r\n    arraySteps.push(currentStep);\r\n  }\r\n//colorSteps加入新的一個array(步驟)\r\nfunction updateColor(position, colorSteps, start, arrayL, arrayR) {\r\n  //複製colorSteps的最後一個array\r\n  let colorKey = colorSteps[colorSteps.length - 1].slice();\r\n  //計算要更改的元素的終點\r\n  let end = position + start + arrayL.length + arrayR.length;\r\n  //計算要更改的元素的起點\r\n  start = start + position;\r\n  if (end === start) {\r\n    colorKey.fill(1, start, end + 2);\r\n  } else {\r\n    colorKey.fill(1, start, end+1);\r\n  }\r\n  colorSteps.push(colorKey);\r\n}\r\n\r\nexport default mergeSort;","import { swap, insertStep } from './helpers';\r\n\r\nconst quickSort = (array, position, arraySteps, colorSteps) => {\r\n  if (array.length < 2) {\r\n    insertStep(array, position, arraySteps);\r\n    let colorKey = colorSteps[colorSteps.length - 1].slice();\r\n    colorKey[position] = 2;\r\n    colorSteps.push(colorKey);\r\n    return;\r\n  }\r\n\r\n  // pick median of three numbers as pivot and sent it to back\r\n  swap(array, pickPivot(array), array.length - 1);\r\n  insertStep(array, position, arraySteps);\r\n  colorSteps.push(colorSteps[colorSteps.length - 1].slice());\r\n\r\n  let pivot = array[array.length - 1];\r\n  let A = 0;\r\n  let B = array.length - 1;\r\n\r\n  // swap small value from right with big value from left\r\n  while (A < B) {\r\n    while (array[A] < pivot) {\r\n      //arraySteps增加一個步驟\r\n      insertStep(array, position, arraySteps);\r\n      //colorSteps增加一個步驟\r\n      let colorKey = colorSteps[colorSteps.length - 1].slice();\r\n      colorKey = colorKey.map(key => key === 2 ? 2 : 0);\r\n      colorKey[position + A] = 1;\r\n      colorKey[position + B] = 1;\r\n      colorSteps.push(colorKey);\r\n      A++;\r\n    }\r\n    while (array[B] >= pivot) {\r\n      //arraySteps增加一個步驟\r\n      insertStep(array, position, arraySteps);\r\n      //colorSteps增加一個步驟\r\n      let colorKey = colorSteps[colorSteps.length - 1].slice();\r\n      colorKey = colorKey.map(key => key === 2 ? 2 : 0);\r\n      colorKey[position + A] = 1;\r\n      colorKey[position + B] = 1;\r\n      colorSteps.push(colorKey);\r\n      B--;\r\n    }\r\n    if (A < B) {\r\n      swap(array, A, B);\r\n      insertStep(array, position, arraySteps);\r\n      let colorKey = colorSteps[colorSteps.length - 1].slice();\r\n      colorKey = colorKey.map(key => key === 2 ? 2 : 0);\r\n      colorKey[position + A] = 1;\r\n      colorKey[position + B] = 1;\r\n      colorSteps.push(colorKey);\r\n    }\r\n  }\r\n\r\n  // swap big value with pivot\r\n  let bigIndex = Math.max(A, B);\r\n\r\n  swap(array, bigIndex, array.length - 1);\r\n  insertStep(array, position, arraySteps);\r\n  let colorKey = colorSteps[colorSteps.length - 1].slice();\r\n  colorKey[position + bigIndex] = 2;\r\n  colorSteps.push(colorKey);\r\n\r\n  // recurse on two halves\r\n  quickSort(array.slice(0, A), position, arraySteps, colorSteps);\r\n  quickSort(array.slice(A + 1), position + A + 1, arraySteps, colorSteps);\r\n\r\n  return;\r\n}\r\n//選頭 中間 尾 3個值的中間值為Pivot\r\nfunction pickPivot(array) {\r\n  let A = array[0];\r\n  let B = array[Math.floor(array.length / 2)];\r\n  let C = array[array.length - 1];\r\n\r\n  let middleValue = [A, B, C].sort()[1];\r\n  let middleIndex = array.indexOf(middleValue);\r\n  console.log(middleValue)\r\n  return middleIndex;\r\n}\r\n\r\nexport default quickSort;","import { swap } from './helpers';\r\nconst selectionSort = (array, position, arraySteps, colorSteps) => {\r\n    let colorKey = colorSteps[colorSteps.length - 1].slice();\r\n    //輸出完整的arraySteps colorSteps\r\n     \r\n    for (let i = 0; i < array.length - 1; i++) {\r\n      let changeindex = i;\r\n      for (let j = i+1; j < array.length ; j++) {\r\n        if (array[j] < array[changeindex]) {\r\n          changeindex = j;\r\n        }\r\n      }\r\n      array = swap(array,changeindex,i)\r\n      arraySteps.push(array.slice());\r\n      colorKey[changeindex] = 1;\r\n      colorKey[i] = 1;\r\n      colorSteps.push(colorKey.slice());\r\n      colorKey[changeindex] = 0;\r\n      colorKey[i] = 0;\r\n      \r\n      //最大值設定為綠色\r\n      colorKey[i] = 2;\r\n      arraySteps.push(array.slice());\r\n      colorSteps.push(colorKey.slice());\r\n    }\r\n  \r\n    // Remaining bars become green\r\n    colorSteps[colorSteps.length - 1] = new Array(array.length).fill(2);\r\n    return;\r\n  }\r\n  \r\n  export default selectionSort;","import React from 'react';\r\nimport \"./Bar.css\"\r\n\r\nfunction Bar({ length, colorKey }) {\r\n    const COLOR_SET = [\"black\", \"red\", \"green\"];\r\n    let color = COLOR_SET[colorKey];\r\n    let style = {\r\n      height: length,\r\n      backgroundColor: color,\r\n    }\r\n    return (\r\n      <div className=\"bar\" style={style} >{length}</div>\r\n    )\r\n  }\r\n  \r\n  export default Bar;","import React from 'react';\nimport {Autorenew,PlayArrow,Pause,SkipPrevious,SkipNext} from '@material-ui/icons';\nimport { IconButton } from '@material-ui/core';\nimport bubbleSort from './algorithms/bubbleSort';\nimport mergeSort from './algorithms/mergeSort';\nimport quickSort from './algorithms/quickSort';\nimport selectionSort from './algorithms/selectionSort';\nimport './App.css';\n\nimport Bar from './components/Bar';\n\nclass App extends React.Component{\n  state={\n    array:[],//完整資料\n    arraySteps:[],//bar排序的過程中數值的變化步驟 每一個步驟為一個array\n    colorKey:[],//決定bar的顏色\n    colorSteps:[],//bar排序的過程中顏色的變化步驟 每一個步驟為一個array\n    currentStep:0,//bar排序顏色變化的步驟數\n    barCount:10,//資料數量\n    timeouts: [],\n    delay:300,\n    algorithms:'Bubble Sort'\n  }\n  algorithmsSet = {\n    'Bubble Sort': bubbleSort,\n    'Merge Sort': mergeSort,\n    'Quick Sort': quickSort,\n    'Selection Sort':selectionSort,\n  }\n  \n  componentDidMount(){\n    this.generateBars();\n  }\n\n  generateBars = ()=>{\n    this.clearColorKey();\n    this.clearTimeouts();\n    //parseInt將輸入的字串轉為整數\n    let barCount = parseInt(this.state.barCount);\n    let barsTemp = [];\n    //製造出barCount個亂數\n    for (let i =0;i<barCount;i++){\n      barsTemp.push(Math.floor(Math.random()*90)+10);\n    }\n    //{}中為 更新4個數據  \n    //()=>this.generateSteps(): 將4個數據傳給函數 並將數據更新為函數的輸出\n    this.state.arraySteps = [barsTemp]\n    this.setState({\n      array:barsTemp,\n      arraySteps:[barsTemp],\n      barCount:barCount,\n      currentStep:0,\n    },()=>this.generateSteps());\n  }\n\n  clearColorKey(){ \n    //resetKey為barCount個0的array\n    let resetKey = new Array(parseInt(this.state.barCount)).fill(0);\n    this.setState({\n      colorKey :resetKey,\n      colorSteps :[resetKey],\n    });\n  }\n\n  clearTimeouts = () => {\n    this.state.timeouts.forEach(timeout => clearTimeout(timeout));\n    this.setState({\n      timeouts: [],\n    })\n  }\n\n  changeToBubbleSort=()=>{\n    this.setState({\n      algorithms: 'Bubble Sort',\n      currentStep: 0,\n      arraySteps: [this.state.arraySteps[this.state.currentStep === 0 ? 0 : this.state.currentStep - 1]],\n    }, () => this.generateSteps());\n    this.clearTimeouts();\n    this.clearColorKey();\n  }\n  changeToQuickSort=()=>{\n    this.setState({\n      algorithms: 'Quick Sort',\n      currentStep: 0,\n      arraySteps: [this.state.arraySteps[this.state.currentStep === 0 ? 0 : this.state.currentStep - 1]],\n    }, () => this.generateSteps());\n    this.clearTimeouts();\n    this.clearColorKey();\n  }\n  changeToMergeSor= (e) =>{\n    this.setState({\n      algorithms: e.target.value,\n      currentStep: 0,\n      arraySteps: [this.state.arraySteps[this.state.currentStep === 0 ? 0 : this.state.currentStep - 1]],\n    }, () => this.generateSteps());\n    this.clearTimeouts();\n    this.clearColorKey();\n  }\n  changeToSelectionSor= (e) =>{\n    this.setState({\n      algorithms: e.target.value,\n      currentStep: 0,\n      arraySteps: [this.state.arraySteps[this.state.currentStep === 0 ? 0 : this.state.currentStep - 1]],\n    }, () => this.generateSteps());\n    this.clearTimeouts();\n    this.clearColorKey();\n  }\n\n  generateSteps=()=>{\n    //複製array arraySteps colorSteps三組數據\n    let array = this.state.array.slice();\n    let steps = this.state.arraySteps.slice();\n    let colorSteps = this.state.colorSteps.slice();\n    //執行演算法放入參數(array, 0, steps, colorSteps)\n    this.algorithmsSet[this.state.algorithms](array, 0, steps, colorSteps);\n    this.setState({\n      arraySteps: steps,\n      colorSteps: colorSteps,\n    });\n  }\n\n  setTimeouts() {\n    let steps = this.state.arraySteps;\n    let colorSteps = this.state.colorSteps;\n\n    this.clearTimeouts();\n    let timeouts = [];\n    let i = 0;\n    //steps.length - this.state.currentStep決定剩下的步數\n    while (i < steps.length - this.state.currentStep) {\n      let timeout = setTimeout(() => {\n        let currentStep = this.state.currentStep;\n        this.setState({\n          array: steps[currentStep],\n          colorKey: colorSteps[currentStep],\n          currentStep: currentStep + 1,\n        });\n      }, this.state.delay * (i));\n      timeouts.push(timeout);\n      i++;\n    }\n    this.setState({\n      timeouts: timeouts,\n    });\n  }\n  \n  stepBack=()=>{\n    if (this.state.currentStep === 0) return;\n    this.clearTimeouts();\n    let currentStep = this.state.currentStep-1;\n    this.setState({\n      array: this.state.arraySteps[currentStep],\n      colorKey: this.state.colorSteps[currentStep],\n      currentStep: currentStep,\n    });\n  }\n  stepForward=()=>{\n    if(this.state.currentStep>=this.state.arraySteps.length-1) return;\n    this.clearTimeouts();\n    let currentStep = this.state.currentStep+1;\n    this.setState({\n      array: this.state.arraySteps[currentStep],\n      colorKey: this.state.colorSteps[currentStep],\n      currentStep: currentStep,\n    });\n\n  }\n\n  render(){\n    //map對array進行循環\n    console.log();\n    let barsDiv = this.state.array.map((value,index) => <Bar\n      key={index}\n      length={value}\n      colorKey={this.state.colorKey[index]}\n    />);\n    let playarrayBtn;\n\n    //排序進行中\n    if (this.state.timeouts.length !==0 && this.state.currentStep !== this.state.arraySteps.length){\n      playarrayBtn = (\n        <IconButton onClick={()=>this.clearTimeouts()}>\n          <Pause/>\n        </IconButton>\n      );\n      //完成排序\n    }else if(this.state.currentStep == this.state.arraySteps.length){\n      playarrayBtn = (\n        <IconButton color=\"secondary\" onClick={()=>this.generateBars()}>\n          <Autorenew/>\n        </IconButton>\n      );\n      //靜止狀態\n    }else{\n      playarrayBtn = (\n        <IconButton onClick={()=>this.setTimeouts()}>\n          <PlayArrow/>\n        </IconButton>\n      );\n    }\n\n    return(\n      <div className=\"App\">\n        <h1>Sorting Visualization</h1>\n        <section className=\"algorithm Btn\">\n          <button   \n            className=\"bubblesortBtn\"\n            onClick={this.changeToBubbleSort}\n          >Bubble Sort</button>\n          <button \n            className=\"mergesortBtn\"\n            value =\"Merge Sort\"\n            onClick={this.changeToMergeSor}\n          >Merge Sort</button>\n          <button \n            className=\"quicksortBtn\"\n            value =\"Quick Sort\"\n            onClick={this.changeToQuickSort}\n          >Quick Sort</button>\n          <button \n            className=\"selectionsortBtn\"\n            value =\"Selection Sort\"\n            onClick={this.changeToSelectionSor}\n          >Selection Sort</button>\n        </section>\n        {/* bar的繪製 */}\n        <section className=\"bars card container\">\n          {barsDiv}\n        </section>\n        {/* 功能按鍵 */}\n        <section className=\"container-small\">\n          <IconButton onClick={()=>this.generateBars()}>\n            <Autorenew/>\n          </IconButton>\n          <IconButton onClick={this.stepBack} >\n            <SkipPrevious />\n          </IconButton>\n          {playarrayBtn}\n          <IconButton onClick={this.stepForward} >\n            <SkipNext />\n          </IconButton> \n        </section>\n\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}